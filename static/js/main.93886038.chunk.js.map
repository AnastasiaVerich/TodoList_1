{"version":3,"sources":["api/types.ts","api/todolist-api.ts","features/common-actions/App.ts","utils/error-utils.ts","features/todolist-list/todolistsReducer.ts","features/todolist-list/tasksReducer.ts","components/add-item-form/AddItemForm.tsx","components/editable-span/EditSpan.tsx","utils/redux-utils.ts","features/todolist-list/Todolist/task/Task.tsx","features/todolist-list/Todolist/Todolist.tsx","features/auth/selectors.ts","features/application/selectors.ts","features/todolist-list/TodolistList.tsx","features/todolist-list/index.tsx","components/error-snack-bar/ErrorSnackbar.tsx","features/auth/auth-reducer.ts","features/auth/Login.tsx","features/auth/index.tsx","features/application/app-reducer.ts","features/application/index.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["TaskStatus","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","tasksAPI","taskId","model","authAPI","data","appCommonActions","setAppStatus","createAction","setAppError","handleAsyncServerAppError","thunkAPI","showError","dispatch","error","messages","length","status","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","fetchTodolistsThunk","createAsyncThunk","param","a","res","todolists","deleteTodolistTC","changeTodolistEntityStatusAC","id","entityStatus","createTodolistTC","resultCode","todolist","item","updateTodolistTC","asyncActions","slice","createSlice","name","initialState","reducers","CHANGETODOLISTFILTERAC","state","action","index","findIndex","x","payload","filter","extraReducers","builder","addCase","fulfilled","map","tl","splice","unshift","console","log","reducer","actions","fetchTasksTC","tasks","items","createTasksTC","deleteTaskTC","updateTaskTC","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","AddInputForm","React","memo","props","useState","setTitle","setError","addItemHandler","trim","addItem","TextField","variant","disabled","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","onClick","color","EditSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","Task","tasksActions","onClikHeader","useCallback","todolistID","onStatusChange","checked","Complited","New","onChangeTitle","className","Checkbox","Delete","fontSize","TodoList","todolistsActions","useEffect","addTask","helper","thunk","result","rejected","match","errorMessage","onchangeTitleTodolist","onFilterButtonClickHandler","arrayTasksForONEtodolist","renderFilterButton","buttonFilter","text","Button","selectIsLoggedIn","auth","isLoggedIn","selectStatus","app","selectIsInitialized","isInitialized","selectError","TodolistList","useSelector","tasksArray","addTodoList","Container","fixed","Grid","container","style","padding","spacing","allTodolistTasks","Paper","to","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","tasksReducer","Alert","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","loginTC","logoutTC","setIsLoggedInAC","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","authActions","resultAction","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","type","FormControlLabel","control","authReducer","initializeAppTC","isLoaded","appActions","appReducer","App","authSelectors","logoutHandler","AppBar","position","Toolbar","edge","aria-label","MenuItem","Typography","LinearProgress","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.93886038.chunk.js","sourcesContent":["export type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type FieldErrorType = { field: string; error: string }\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n\r\n    data: D\r\n}\r\n\r\n export enum TaskStatus {\r\n    New,\r\n    InProgress,\r\n    Complited,\r\n    Draft\r\n\r\n}\r\n\r\n export enum TaskPriorities {\r\n    Low = 0,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\n\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatus\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatus\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}","import axios from 'axios'\r\nimport {\r\n    GetTasksResponse,\r\n    LoginParamsType,\r\n    ResponseType,\r\n    TaskStatus,\r\n    TaskType,\r\n    TodolistType,\r\n    UpdateTaskModelType\r\n} from \"./types\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '603ef8c0-4933-4294-ab5f-b170d3ebe6d8'\r\n    }\r\n})\r\n\r\n\r\nexport const todolistAPI = {\r\n    getTodoLists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists',\r\n            {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`,\r\n            {title: title})\r\n    },\r\n\r\n\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        const promise = instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n        return promise\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n        return promise\r\n    },\r\n    createTasks(title: string, todolistId: string) {\r\n        const promise = instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`,\r\n            {title: title})\r\n        return promise\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType<{userId?: number}>>('auth/login')\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<{ id: number; email: string; login: string }>>('auth/me')\r\n    }\r\n}","import {createAction} from '@reduxjs/toolkit'\r\nimport {RequestStatusType} from '../application/app-reducer'\r\n\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('appCommonActions/setAppStatus')\r\nconst setAppError = createAction<{error: string | null}>('appCommonActions/setAppError')\r\n\r\nexport const appCommonActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}","import {appCommonActions} from \"../features/common-actions/App\";\r\nimport {ResponseType} from '../api/types'\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n// если пришел статус не тот, который ожидали\r\n//showError = true- показывать ли ошибку в errorShackbar\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appCommonActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appCommonActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n//если нет сети, например\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appCommonActions.setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appCommonActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}","import {todolistAPI} from \"../../api/todolist-api\";\r\nimport {RequestStatusType} from \"../application/app-reducer\";\r\nimport {appCommonActions} from \"../common-actions/App\";\r\nimport {\r\n    handleAsyncServerAppError,\r\n    handleAsyncServerNetworkError,\r\n} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {TodolistType} from \"../../api/types\";\r\nimport {ThunkError} from \"../../utils/types\";\r\n\r\n\r\nconst {setAppStatus} = appCommonActions\r\n\r\n\r\nconst fetchTodolistsThunk = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>\r\n('todolists/fetchTasks', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.getTodoLists()\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n\r\n})\r\nconst deleteTodolistTC = createAsyncThunk<{ id: string }, string, ThunkError>('todolists/deleteTodolist', async (todolistId, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: 'loading'}))\r\n    const res = await todolistAPI.deleteTodolist(todolistId)\r\n    //скажем глобально приложению, что асинхронная операция завершена\r\n    dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {id: todolistId}\r\n})\r\nconst createTodolistTC = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>('todolists/createTodolist', async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nconst updateTodolistTC = createAsyncThunk('todolists/updateTodolist', async (param: { id: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n\r\n    try {\r\n        let res = await todolistAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const asyncActions = {\r\n    updateTodolistTC,\r\n    createTodolistTC,\r\n    deleteTodolistTC,\r\n    fetchTodolistsThunk\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        CHANGETODOLISTFILTERAC(state, action: PayloadAction<{ filter: FilterType, id: string }>) {\r\n            const index = state.findIndex(x => x.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {\r\n            const index = state.findIndex(x => x.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchTodolistsThunk.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map((tl: any) => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n            })\r\n            .addCase(deleteTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(x => x.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                } else {\r\n                }\r\n            })\r\n            .addCase(createTodolistTC.fulfilled, (state, action) => {\r\n\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n\r\n            .addCase(updateTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(x => x.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n                console.log(state[index])\r\n\r\n            });\r\n    }\r\n})\r\nexport const todolistsReducer = slice.reducer\r\nexport const {changeTodolistEntityStatusAC, CHANGETODOLISTFILTERAC} = slice.actions\r\n\r\nexport type FilterType = \"all\" | \"complited\" | \"active\"\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\n\r\n\r\n","import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {TaskPriorities, TaskStatus, TaskType, UpdateTaskModelType} from \"../../api/types\";\r\nimport {tasksAPI} from \"../../api/todolist-api\";\r\nimport {appCommonActions} from \"../common-actions/App\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AppRootType, ThunkError} from \"../../utils/types\";\r\nimport {asyncActions as asyncTodolistsActions} from './todolistsReducer'\r\n\r\n\r\nconst initialState: any = {}\r\nconst {setAppStatus} = appCommonActions\r\n\r\n\r\n const fetchTasksTC = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await tasksAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n const createTasksTC = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/createTasks', async (param: { title: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        let res = await tasksAPI.createTasks(param.title, param.todolistId)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(appCommonActions.setAppStatus({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n        return     handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (err) {\r\n\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\n const deleteTaskTC = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string }, ThunkError>('tasks/deleteTask',\r\n     async (param, thunkAPI) => {\r\n     thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await tasksAPI.deleteTask(param.todolistId, param.taskId)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolistId: param.todolistId, taskId: param.taskId}\r\n\r\n        } else {\r\n         return    handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (err) {\r\n\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n\r\n\r\n})\r\n\r\n\r\n\r\nconst updateTaskTC = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\r\n\r\n    const state = thunkAPI.getState() as AppRootType\r\n\r\n    const task = state.tasks[param.todolistId].find((t:TaskType) => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {    const res = await tasksAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(appCommonActions.setAppStatus({status: 'succeeded'}))\r\n            return param\r\n        } else {\r\n\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\n\r\nexport const asyncActions = {\r\n    fetchTasksTC,\r\n    createTasksTC,\r\n    deleteTaskTC,\r\n    updateTaskTC\r\n}\r\nexport const slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(asyncTodolistsActions.createTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(asyncTodolistsActions.deleteTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(asyncTodolistsActions.fetchTodolistsThunk.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n\r\n        });\r\n        builder.addCase(deleteTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex((x: any) => x.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n\r\n            }\r\n        });\r\n        builder.addCase(createTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n\r\n        });\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex((t:TaskType) => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        });\r\n    }\r\n})\r\n\r\n\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatus\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void }\r\n\r\nexport  type AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddInputForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title, {setError, setTitle})\r\n        } else {\r\n            setError('Title is Required')\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            return setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n\r\n    return (<div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                disabled={props.disabled}\r\n                error={!!error}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n            />\r\n            <IconButton onClick={addItemHandler} color={\"primary\"} disabled={props.disabled}>\r\n                +\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditSpanProps = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditSpan = React.memo((props: EditSpanProps) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(props.value)\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (editMode\r\n            ? <TextField onBlur={activateViewMode} value={title} onChange={onChangeTitle} autoFocus/>\r\n            : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n    )\r\n\r\n})","import {useDispatch} from \"react-redux\";\r\nimport {AppDispatchType} from \"./types\";\r\nimport {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useMemo} from \"react\";\r\n\r\n// useDispatch, который диспатчит только action с указанным тип.\r\n// в типах- все типы актион из редьюсеров всех\r\nexport const useAppDispatch=()=>useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T){\r\n    const dispatch = useAppDispatch()\r\n\r\n\r\n    const boundActions = useMemo(()=>{\r\n        return bindActionCreators(actions, dispatch)\r\n    },[])\r\n    return boundActions\r\n}","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditSpan} from \"../../../../components/editable-span/EditSpan\";\r\nimport {TaskStatus, TaskType} from \"../../../../api/types\";\r\nimport {useActions} from \"../../../../utils/redux-utils\";\r\nimport {tasksActions} from \"../../index\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TASKStype = {\r\n\r\n    task: TaskType//task\r\n    todolistID: string//todolistID\r\n\r\n}\r\nexport const Task = React.memo((props: TASKStype) => {\r\n    const {deleteTaskTC, updateTaskTC} = useActions(tasksActions)\r\n\r\n    const onClikHeader = useCallback(() => deleteTaskTC({taskId: props.task.id, todolistId: props.todolistID}),\r\n        [props.task.id, props.todolistID])\r\n\r\n    const onStatusChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTaskTC({\r\n                taskId: props.task.id,\r\n                model: {status: e.currentTarget.checked ? TaskStatus.Complited : TaskStatus.New},\r\n                todolistId: props.todolistID\r\n            }\r\n        )\r\n    }, [props.task.id, props.todolistID])\r\n\r\n    const onChangeTitle = useCallback((title: string) => {\r\n        updateTaskTC({\r\n                taskId: props.task.id,\r\n                model: {title:title},\r\n                todolistId: props.todolistID\r\n            }\r\n        )    }, [props.task.id, props.todolistID])\r\n\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatus.Complited ? \"is-done\" : \"\"}>\r\n            <Checkbox\r\n                checked={props.task.status == TaskStatus.Complited}\r\n                color={\"primary\"}\r\n                onChange={onStatusChange}/>\r\n            <EditSpan value={props.task.title}\r\n                      onChange={onChangeTitle}/>\r\n            <IconButton onClick={onClikHeader}>\r\n                <Delete fontSize={'small'}/>\r\n            </IconButton>\r\n\r\n        </div>)\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport '../../../app/App.css';\r\nimport {AddInputForm, AddItemFormSubmitHelperType} from \"../../../components/add-item-form/AddItemForm\";\r\nimport {EditSpan} from \"../../../components/editable-span/EditSpan\";\r\nimport {Button, IconButton, PropTypes} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./task/Task\";\r\nimport {FilterType, TodolistDomainType} from \"../todolistsReducer\";\r\nimport {TaskStatus, TaskType} from \"../../../api/types\";\r\nimport {useActions, useAppDispatch} from \"../../../utils/redux-utils\";\r\nimport {tasksActions, todolistsActions} from \"../index\";\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n}\r\n\r\nexport const TodoList = React.memo(function (props: PropsType) {\r\n    const dispatch = useAppDispatch()\r\n    const {fetchTasksTC, createTasksTC} = useActions(tasksActions)\r\n    const {\r\n        CHANGETODOLISTFILTERAC,\r\n        updateTodolistTC,\r\n        deleteTodolistTC\r\n    } = useActions(todolistsActions)\r\n\r\n    useEffect(() => {\r\n        fetchTasksTC(props.todolist.id)\r\n    }, [])\r\n\r\n    const addTask = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        //const result = await createTasksTC({title: title, todolistId: props.todolist.id})\r\n\r\n        let thunk = tasksActions.createTasksTC({title: title, todolistId: props.todolist.id})\r\n        const result = await dispatch(thunk)\r\n        if (tasksActions.createTasksTC.rejected.match(result)) {\r\n            if (result.payload?.errors?.length) {\r\n                const errorMessage = result.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n                console.log(errorMessage)\r\n\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [props.todolist.id])\r\n\r\n    const remuveTodolist = () => {\r\n        deleteTodolistTC(props.todolist.id)\r\n    }\r\n\r\n    const onchangeTitleTodolist = useCallback((title: string) => {\r\n        updateTodolistTC({id: props.todolist.id, title: title})\r\n    }, [props.todolist.id])\r\n\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterType) =>\r\n        CHANGETODOLISTFILTERAC({\r\n            filter: filter,\r\n            id: props.todolist.id\r\n        }), [props.todolist.id])\r\n\r\n    let arrayTasksForONEtodolist = props.tasks\r\n    if (props.todolist.filter === \"active\") {\r\n        arrayTasksForONEtodolist = props.tasks.filter(t => t.status === TaskStatus.New)\r\n    }\r\n    if (props.todolist.filter === \"complited\") {\r\n        arrayTasksForONEtodolist = props.tasks.filter(t => t.status === TaskStatus.Complited)\r\n    }\r\n    const renderFilterButton = (buttonFilter: FilterType,\r\n                                color: PropTypes.Color,\r\n                                text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}>{text}\r\n        </Button>\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditSpan onChange={onchangeTitleTodolist} value={props.todolist.title} />\r\n            <IconButton onClick={remuveTodolist} disabled={props.todolist.entityStatus === \"loading\"}><Delete/></IconButton>\r\n        </h3>\r\n        <AddInputForm addItem={addTask} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n        <div>\r\n           {\r\n               arrayTasksForONEtodolist.map(x => <Task\r\n                                                     task={x}\r\n                                                     todolistID={props.todolist.id}\r\n                                                     key={x.id}/>)\r\n            }\r\n        </div>\r\n        <div>\r\n            {renderFilterButton('all', 'default', 'All')}\r\n            {renderFilterButton('active', 'primary', 'Active')}\r\n            {renderFilterButton('complited', 'secondary', 'Completed')}\r\n\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {AppRootType} from \"../../utils/types\";\r\n\r\n\r\nexport const selectIsLoggedIn =(state: AppRootType)=> state.auth.isLoggedIn","import {AppRootType} from \"../../utils/types\";\r\n\r\nexport const selectStatus=(state: AppRootType)=> state.app.status\r\nexport const selectIsInitialized = (state: AppRootType)=> state.app.isInitialized\r\nexport const selectError = (state: AppRootType)=> state.app.error","import React, {useCallback, useEffect} from 'react';\r\nimport '../../app/App.css';\r\nimport {TodoList} from \"./Todolist/Todolist\";\r\nimport {AddInputForm, AddItemFormSubmitHelperType} from \"../../components/add-item-form/AddItemForm\";\r\nimport {Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {TodolistDomainType,} from \"./todolistsReducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../app/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {TaskType} from \"../../api/types\";\r\nimport {TasksStateType} from \"./tasksReducer\";\r\nimport {selectIsLoggedIn} from \"../auth/selectors\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {todolistsActions} from \"./index\";\r\nimport {selectIsInitialized} from \"../application/selectors\";\r\n\r\n\r\nexport type tasksType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nconst TodolistList = () => {\r\n    const todolists = useSelector<AppRootType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasksArray = useSelector<AppRootType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {fetchTodolistsThunk} = useActions(todolistsActions)\r\n    //add новый тудулист\r\n    const addTodoList = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistsActions.createTodolistTC(title)\r\n        const result = await dispatch(thunk)\r\n        if (todolistsActions.createTodolistTC.rejected.match(result)) {\r\n            if (result.payload?.errors?.length) {\r\n                const errorMessage = result.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        fetchTodolistsThunk()\r\n    }, [])\r\n    /*\r\n    /////////////////TODOLIST////////////////////////////\r\n    //удалить один тудуЛист. По факту мы меняем исхоные два осноных массива(тасок и ТЛ) и заново по ним реакт отрисовывает приложение\r\n        let remuveTodoList = useCallback((todolistid: string) => {\r\n            const action = deleteTodolistTC(todolistid)\r\n            dispatch(action)\r\n        }, [])\r\n\r\n\r\n        // change value in tl\r\n        const changeTitleTodolist = useCallback((title: string, todolistId: string) => {\r\n            const action = updateTodolistTC({todolistID: todolistId, title: title})\r\n            dispatch(action)\r\n        }, [])\r\n\r\n        // меняет  значение фильтра\r\n        const changefilters = useCallback((value: FilterType, TDid: string) => {\r\n            const action = CHANGETODOLISTFILTERAC({filter: value, todolistID: TDid})\r\n            dispatch(action)\r\n        }, [])\r\n\r\n\r\n        ////////////////////TASKS///////////////////////////////\r\n\r\n    //delete choose task\r\n        const deleteTask = useCallback((taskID: string, todolistId: string) => {\r\n            const action = deleteTaskTC({todolistId, taskID})\r\n            dispatch(action)\r\n        }, [])\r\n\r\n    // add new task\r\n        const addTask = useCallback((title: string, todolistId: string) => {\r\n            const action = createTasksTC({title, todolistId})\r\n            dispatch(action)\r\n        }, [])\r\n\r\n        // change value in task\r\n        const changeTitleTask = useCallback((taskID: string, title: string, todolistId: string) => {\r\n            const action = updateTaskTC({todolistId: todolistId, taskId: taskID, title: title})\r\n            dispatch(action)\r\n        }, [])\r\n        // change status in task\r\n        const changeStatus = useCallback((taskID: string, status: any, todolistId: string) => {\r\n            const action = updateTaskStatusTC({todolistId: todolistId, taskId: taskID, status: status})\r\n            dispatch(action)\r\n        }, [])\r\n\r\n    // change isDone task\r\n    //     const changeStatus=useCallback((taskID: string, status: TaskStatus, todolistId: string)=> {\r\n    //         const action= changeTaskStatusAC({taskID:taskID, status:status, todolistId:todolistId})\r\n    //         dispatch(action)\r\n    //     },[])\r\n\r\n    */\r\n    if (!isLoggedIn ) {\r\n        return <Redirect to={'/auth'}/>\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"30px\"}}>\r\n                    <AddInputForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolists.map\r\n                    ((x) => {\r\n                        //помещаем в переменную все задачи для тудулиста(по одинаковым айди)\r\n                        let allTodolistTasks = tasksArray[x.id];\r\n                        /* if (task.filter === \"complited\") {\r\n                             arrayTasksForONEtodolist = arrayTasksForONEtodolist.filter(t => t.status === TaskStatus.Complited)\r\n                         }\r\n                         if (task.filter === \"active\") {\r\n                             arrayTasksForONEtodolist = arrayTasksForONEtodolist.filter(t => t.status === TaskStatus.New)\r\n                         }*/\r\n\r\n                        return <Grid item>\r\n                            <Paper style={{padding: \"10px\"}}>\r\n\r\n                                <TodoList\r\n                                    key={x.id}\r\n                                    tasks={allTodolistTasks}\r\n                                    todolist={x}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodolistList;","import {asyncActions as todolistsAsyncActions, slice  as todolistsSlice} from \"./todolistsReducer\";\r\nimport {asyncActions as tasksAsyncActions, slice as tasksSlice} from \"./tasksReducer\";\r\nimport TodolistList from \"./TodolistList\";\r\n\r\n\r\n\r\nconst todolistsActions ={\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\nconst todolistsReducer = todolistsSlice.reducer\r\nconst tasksReducer = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistList,\r\n    todolistsReducer,\r\n    tasksReducer\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectError} from \"../../features/application/selectors\";\r\nimport {useActions} from \"../../utils/redux-utils\";\r\nimport { appCommonActions} from \"../../features/common-actions/App\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector(selectError)\r\n    const {setAppError} = useActions(appCommonActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null})\r\n    }\r\n//если мы измение в стейте еррор не на ноль, то открывается это окно\r\n    return (\r\n        <Snackbar open={error != null} autoHideDuration={5000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {authAPI} from \"../../api/todolist-api\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {appCommonActions} from \"../common-actions/App\";\r\nimport {FieldErrorType, LoginParamsType} from \"../../api/types\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst {setAppStatus} = appCommonActions\r\n\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType,\r\n    { rejectValue: { errors: string[], fieldsErrors?: FieldErrorType[] } }>\r\n('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    loginTC,\r\n    logoutTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(loginTC.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            })\r\n            .addCase(logoutTC.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\nexport const setIsLoggedInAC = slice.actions.setIsLoggedInAC\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport { loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {selectIsLoggedIn} from \"./selectors\";\r\nimport {authActions} from \"./index\";\r\n\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn= useSelector(selectIsLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if(!values.password){\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const resultAction = await dispatch(authActions.loginTC(values))\r\n            if (loginTC.rejected.match(resultAction)){\r\n                if (resultAction.payload?.fieldsErrors?.length){\r\n                    const error = resultAction.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n  if(isLoggedIn){\r\n      return <Redirect to={'/'}/>\r\n  }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n\r\n                        {...formik.getFieldProps('email')}\r\n\r\n/*\r\n                        onBlur={formik.handleBlur}\r\n*/\r\n                    />\r\n                    {  formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div>: null}\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('password')}\r\n                        // onBlur={formik.handleBlur}\r\n                    />\r\n                    {  formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div>: null}\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox />}\r\n                        {...formik.getFieldProps('rememberMe')}\r\n                        checked={formik.values.rememberMe}\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import {asyncActions, slice} from \"./auth-reducer\";\r\nimport { Login } from \"./Login\";\r\nimport * as authSelectors from './selectors'\r\n\r\n\r\nconst authActions = {\r\n    ...slice.actions,\r\n    ...asyncActions\r\n}\r\n\r\nconst authReducer= slice.reducer\r\n\r\nexport{\r\n    authActions,\r\n    authReducer,\r\n    Login,\r\n    authSelectors\r\n}","import {authAPI} from \"../../api/todolist-api\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {appCommonActions} from \"../common-actions/App\";\r\nimport { authActions } from \"../auth\";\r\n\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (param, thunkAPI) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        thunkAPI.dispatch(authActions.setIsLoggedInAC({value: true}))\r\n    } else {\r\n\r\n    }\r\n})\r\n\r\n\r\nexport const asyncActions = {\r\n    initializeAppTC\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: \"app\",\r\n    initialState: {\r\n        status: 'idle' as RequestStatusType,\r\n        error: null as string | null,\r\n        isInitialized: false,\r\n        isLoaded: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(initializeAppTC.fulfilled, (state, action) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(appCommonActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appCommonActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            });\r\n    }\r\n})\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n///////////////////////////////////////////////////////////////////////////\r\n\r\n\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n//////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n\r\n","import {asyncActions, slice} from \"./app-reducer\";\r\nimport * as appSelectors from './selectors'\r\n\r\n\r\nconst appActions ={\r\n    ...slice.actions,\r\n    ...asyncActions\r\n}\r\n\r\nconst appReducer= slice.reducer\r\n\r\nexport{\r\n    appActions,\r\n    appReducer,\r\n    appSelectors\r\n\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    MenuItem,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {TodolistList} from \"../features/todolist-list/\";\r\nimport {ErrorSnackbar} from \"../components/error-snack-bar/ErrorSnackbar\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {appActions} from \"../features/application\";\r\n\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {authActions, authSelectors, Login} from \"../features/auth\";\r\nimport {selectIsInitialized, selectStatus} from \"../features/application/selectors\";\r\nimport {useActions} from \"../utils/redux-utils\";\r\n\r\n\r\nconst App = () => {\r\n    const status = useSelector(selectStatus)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n\r\n    const {logoutTC} = useActions(authActions)\r\n    const {initializeAppTC} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        initializeAppTC()\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        logoutTC()\r\n    }, [])\r\n    if (!isInitialized ) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuItem/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        My App\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\"\r\n                                           onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistList/>}/>\r\n                    <Route path={'/auth'} render={() => <Login/>}/>\r\n                    <Route path={'*'} render={() => <TodolistList/>}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import {combineReducers} from \"redux\";\r\nimport {todolistsReducer} from \"../features/todolist-list/\";\r\nimport {tasksReducer} from \"../features/todolist-list/\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"../features/application/\";\r\nimport {authReducer} from \"../features/auth/\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nexport const rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport type RootReducerType=typeof rootReducer\r\nexport type AppRootType = ReturnType<RootReducerType>\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the appActions load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web appActions is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different appActions. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Application is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\n\r\nReactDOM.render(\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n\r\n            <App/>\r\n\r\n            </BrowserRouter>\r\n        </Provider>\r\n    , document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}